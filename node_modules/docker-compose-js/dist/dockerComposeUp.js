"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const executeCommand_1 = require("./executeCommand");
const getDockerComposeCommand_1 = require("./getDockerComposeCommand");
const showComposeConfig_1 = require("./showComposeConfig");
function dockerComposeUp(config) {
    return __awaiter(this, void 0, void 0, function* () {
        const options = {
            env: config.environmentVariables,
            cwd: config.cwd
        };
        if (config.showConfig) {
            yield showComposeConfig_1.showComposeConfig(config);
        }
        const build = config.build ? '--build' : '';
        const servicesToStart = (config.servicesToStart || []).join(' ');
        const command = getDockerComposeCommand_1.getDockerComposeCommand({
            command: 'up',
            commandArgs: ['-d', build, servicesToStart],
            composeFiles: config.composeFiles,
            projectName: config.projectName
        });
        return executeCommand_1.executeCommand(command, options);
    });
}
exports.dockerComposeUp = dockerComposeUp;
