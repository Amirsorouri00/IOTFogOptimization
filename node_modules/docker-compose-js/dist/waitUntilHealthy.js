"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const executeCommand_1 = require("./executeCommand");
const getServiceId_1 = require("./getServiceId");
function waitUntilHealthy(config) {
    return __awaiter(this, void 0, void 0, function* () {
        console.log('waitUntilHealthy: Getting service id');
        const serviceId = yield getServiceId_1.getServiceId({
            composeFiles: config.composeFiles,
            cwd: config.cwd,
            environmentVariables: config.environmentVariables,
            serviceName: config.serviceName,
            projectName: config.projectName
        });
        console.log(`waitUntilHealthy: Got service id: ${serviceId}`);
        const options = {
            env: config.environmentVariables,
            cwd: config.cwd
        };
        let retries = config.retries || 10;
        const checkInterval = config.checkIntervalMilliseconds || 1000;
        const command = `docker ps --filter id=${serviceId} --format "{{.Status}}"`;
        let result;
        do {
            console.log(`waitUntilHealthy: Giving the container time to spin up. Sleeping for [${checkInterval}] milliseconds.`);
            yield new Promise((resolve) => setTimeout(resolve, checkInterval));
            console.log(`waitUntilHealthy: Checking container state using the command [${command}]. Number of retries left: ${retries}. CheckIntervalMilliseconds: ${checkInterval}`);
            result = yield executeCommand_1.executeCommand(command, options);
            console.log('waitUntilHealthy: Command result', result);
            if (result.error) {
                console.log('waitUntilHealthy: Failed checking the container status. Error:', result.stderr);
                throw result.error;
            }
            retries--;
            if (retries < 0) {
                console.log('waitUntilHealthy: No more retries left, reporting container as unhealthy');
                return false;
            }
        } while (!result.stdout || result.stdout.indexOf('starting') >= 0);
        if (result.stdout.indexOf('unhealthy') >= 0) {
            console.log('waitUntilHealthy: Container is reporting an unhealthy state');
            return false;
        }
        console.log('waitUntilHealthy: Container is up. Reporing container as healthy');
        return true;
    });
}
exports.waitUntilHealthy = waitUntilHealthy;
